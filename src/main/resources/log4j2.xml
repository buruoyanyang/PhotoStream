<?xml version="1.0" encoding="UTF-8"?>
<!--
Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，
当设置成trace时，可以看到log4j2内部各种详细输出
-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<configuration status="info" monitorInterval="0">
  <!--日志级别：TRACE < DEBUG < INFO < WARN < ERROR < FATAL-->
  <!--如果设置为WARN，则低于WARN的信息都不会输出-->
    <Properties>
      <!-- 配置日志文件输出目录,此处为项目根目录下的logs文件夹 -->
      <Property name="LOG_HOME">./logs</Property>
      <property name="FILE_NAME">photo-stream</property>
      <property name="LOG_PATTERN">%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight{%-5level}[%thread] %style{%logger{36}}{cyan} : %msg%n</property>

    </Properties>


  <appenders>
    <!--这个输出控制台的配置-->
    <Console name="Console" target="SYSTEM_OUT">
      <!--控制台只输出level及其以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
      <ThresholdFilter level="TRACE" onMatch="ACCEPT" onMismatch="DENY"/>
      <!--日志输出的格式-->
      <!--
          %d{yyyy-MM-dd HH:mm:ss, SSS} : 日志生产时间,输出到毫秒的时间
          %-5level : 输出日志级别，-5表示左对齐并且固定输出5个字符，如果不足在右边补0
          %c : logger的名称(%logger)
          %t : 输出当前线程名称
          %p : 日志输出格式
          %m : 日志内容，即 logger.info("message")
          %n : 换行符
          %C : Java类名(%F)
          %L : 行号
          %M : 方法名
          %l : 输出语句所在的行数, 包括类名、方法名、文件名、行数
          hostName : 本地机器名
          hostAddress : 本地ip地址
       -->
      <PatternLayout pattern="${LOG_PATTERN}"/>
    </Console>

    <RollingRandomAccessFile name="INFO" fileName="${LOG_HOME}/${FILE_NAME}-INFO.log" filePattern="${LOG_HOME}/history/${FILE_NAME}-INFO_%d{yyyy-MM-dd}_%i.log.gz">
      <Filters>
        <ThresholdFilter level="WARN" onMatch="DENY" onMismatch="NEUTRAL"/>
        <ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/>
      </Filters>
      <PatternLayout pattern="${LOG_PATTERN}"/>
      <Policies>
        <TimeBasedTriggeringPolicy interval="1"/>
        <SizeBasedTriggeringPolicy size="20MB"/>
      </Policies>
      <DefaultRolloverStrategy max="30"/>
    </RollingRandomAccessFile>

    <!--错误信息记录-->
    <RollingRandomAccessFile name="ERROR" fileName="${LOG_HOME}/${FILE_NAME}-ERROR.log" filePattern="${LOG_HOME}/history/${FILE_NAME}-ERROR_%d{yyyy-MM-dd}_%i.log.gz">
      <Filters>
        <ThresholdFilter level="FATAL" onMatch="DENY" onMismatch="NEUTRAL"/>
        <ThresholdFilter level="WARN" onMatch="ACCEPT" onMismatch="DENY"/>
      </Filters>
      <PatternLayout pattern="%d{yyyy-MM-dd 'at' HH:mm:ss z} %-5level %class{36} %L %M - %msg%xEx%n"/>
      <Policies>
        <TimeBasedTriggeringPolicy interval="1"/>
        <SizeBasedTriggeringPolicy size="20MB"/>
      </Policies>
      <DefaultRolloverStrategy max="30"/>
    </RollingRandomAccessFile>

    <!--系统级别的错误信息-->
    <RollingRandomAccessFile name="FATAL" fileName="${LOG_HOME}/${FILE_NAME}-FATAL.log" filePattern="${LOG_HOME}/history/${FILE_NAME}-FATAL%d{yyyy-MM-dd}_%i.log.gz">
      <Filters>
        <ThresholdFilter level="FATAL" onMatch="ACCEPT" onMismatch="DENY"/>
      </Filters>
      <PatternLayout pattern="%d{yyyy-MM-dd 'at' HH:mm:ss z} %-5level %class{36} %L %M - %msg%xEx%n"/>
      <Policies>
        <TimeBasedTriggeringPolicy interval="1"/>
        <SizeBasedTriggeringPolicy size="20MB"/>
      </Policies>
      <DefaultRolloverStrategy max="30"/>
    </RollingRandomAccessFile>

    <!--全部日志信息:DEBUG及以上级别-->
    <RollingRandomAccessFile name="DEBUG" fileName="${LOG_HOME}/${FILE_NAME}-DEBUG.log" filePattern="${LOG_HOME}/history/${FILE_NAME}-DEBUG%d{yyyy-MM-dd}_%i.log.gz">
      <Filters>
        <ThresholdFilter level="TRACE" onMatch="ACCEPT" onMismatch="DENY"/>
      </Filters>
      <PatternLayout pattern="%d{yyyy-MM-dd 'at' HH:mm:ss z} %-5level %class{36} %L %M - %msg%xEx%n"/>
      <Policies>
        <TimeBasedTriggeringPolicy interval="1"/>
        <SizeBasedTriggeringPolicy size="50MB"/>
      </Policies>
      <DefaultRolloverStrategy max="30"/>
    </RollingRandomAccessFile>
    <!--druid的日志记录追加器-->
    <RollingRandomAccessFile name="DRUID-SQL" fileName="${LOG_HOME}/${FILE_NAME}-druid-sql.log" filePattern="${LOG_HOME}/history/${FILE_NAME}-DEBUG%d{yyyy-MM-dd}_%i.log.gz">
      <Filters>
        <ThresholdFilter level="DEBUG" onMatch="ACCEPT" onMismatch="DENY"/>
      </Filters>
      <PatternLayout pattern="%d{yyyy-MM-dd 'at' HH:mm:ss z} %-5level %class{36} %L %M - %msg%xEx%n"/>
      <Policies>
        <TimeBasedTriggeringPolicy interval="1"/>
        <SizeBasedTriggeringPolicy size="50MB"/>
      </Policies>
      <DefaultRolloverStrategy max="30"/>
    </RollingRandomAccessFile>

  </appenders>

  <!--Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。-->
  <!--然后定义loggers，只有定义了logger并引入的appender，appender才会生效-->
  <loggers>

    <Logger  name="org.springframework" level="INFO" additivity="true" includeLocation="true">
    </Logger>
    <!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
    <logger name="org.mybatis" level="info" additivity="false">
      <AppenderRef ref="Console"/>
    </logger>
    <!--监控系统信息-->
    <!--若是additivity设为false，则 子Logger 只会在自己的appender里输出，而不会在 父Logger 的appender里输出。-->
    <logger name="druid.sql.Statement" level="debug" additivity="false">
      <appender-ref ref="DRUID-SQL"/>
    </logger>

    <Logger name="springfox.documentation" level="WARN" additivity="true" includeLocation="true">
    </Logger>

    <Logger name="com.alibaba.druid.pool" level="INFO" additivity="true" includeLocation="true">
    </Logger>

    <Logger name="org.springframework.aop.framework.CglibAopProxy" level="WARN" additivity="true" includeLocation="true">
    </Logger>

    <Logger name="com.netflix.discovery" level="INFO" additivity="true" includeLocation="true">
    </Logger>

    <Logger name="com.netflix.loadbalancer" level="INFO" additivity="true" includeLocation="true">
    </Logger>

    <Logger name="org.apache.http" level="INFO" additivity="true" includeLocation="true">
    </Logger>
    <Logger name="org.apache.kafka.clients.NetworkClient" level="off" />
    <logger name="org.apache.kafka.clients" level="ERROR" />
    <logger name="com.alibaba.nacos.client.naming" level="WARN" />
    <logger name="com.alibaba.nacos.client.config.impl.ConfigHttpClientManager" level="WARN" />
    <logger name="com.alibaba.nacos.client.config.*" level="WARN" />

    <Root level="INFO">
      <!-- 这儿为trace表示什么都可以打印出来了,其他几个级别分别为：TRACE、DEBUG、INFO、WARN、ERROR和FATAL -->
      <Appender-Ref ref="Console"/>
      <Appender-Ref ref="DEBUG"/>
      <Appender-Ref ref="INFO"/>
      <Appender-Ref ref="ERROR"/>
      <Appender-Ref ref="FATAL"/>
    </Root>
  </loggers>
</configuration>